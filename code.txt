Common elements

import java.util.ArrayList;
import java.util.List;

public class CommonElementsInThreeArrays {
    public static List<Integer> findCommonElements(int[] arr1, int[] arr2, int[] arr3) {
        List<Integer> commonElements = new ArrayList<>();
        int n1 = arr1.length, n2 = arr2.length, n3 = arr3.length;
        int i = 0, j = 0, k = 0;

        while (i < n1 && j < n2 && k < n3) {
            if (arr1[i] == arr2[j] && arr2[j] == arr3[k]) {
                commonElements.add(arr1[i]);
                i++;
                j++;
                k++;
            } else if (arr1[i] < arr2[j]) {
                i++;
            } else if (arr2[j] < arr3[k]) {
                j++;
            } else {
                k++;
            }
        }

        return commonElements;
    }

    public static void main(String[] args) {
        int[] arr1 = {1, 5, 10, 20, 40, 80};
        int[] arr2 = {6, 7, 20, 80, 100};
        int[] arr3 = {3, 4, 15, 20, 30, 70, 80, 120};

        List<Integer> commonElements = findCommonElements(arr1, arr2, arr3);
        if (!commonElements.isEmpty()) {
            System.out.println("Common elements: " + commonElements);
        } else {
            System.out.println("NO Elements");
        }
    }
}


Elimination Game

class Solution {
    public int lastRemaining(int n) {
        boolean left = true;
        int head = 1;
        int step = 1;
        int remain = n;
        while(remain > 1){
            if(left || remain % 2 == 1){
                head = head + step;
            }
            step = step * 2;
            remain = remain / 2;
            left = !left;
        }
        return head;
    }
}


Special Prime


class GFG
{

	static boolean checkSpecialPrime(boolean [] sieve, int num)
		{
			
			while (num!=0) {
				
				if (!sieve[num]) {
					return false;
				}
		
				
				num /= 10;
			}
		
			
			return true;
		}
		
		static void findSpecialPrime(int N)
		{
			boolean []sieve=new boolean[N+10];
			sieve[0] = sieve[1] = false;

			
			for(int i=0;i<N+10;i++)
				sieve[i]=true;
			
			for (int i = 2; i <= N; i++) {
				if (sieve[i]) {
		
					for ( int j = i * i; j <= N; j += i) {
						sieve[j] = false;
					}
				}
			}
		
			
			while (true) {
				
				if (checkSpecialPrime(sieve, N)) {
					
					System.out.println(N);
					break;
				}
				
				else
					N--;
			}
		}
		
		
		public static void main(String [] args)
		{
			findSpecialPrime(379);
			findSpecialPrime(100);
		
			
		}



}



Transform and Compare

public class StringTransformation {
    public static boolean canTransform(String start, String end) {
       
        if (start.length() != end.length()) {
            return false;
        }

       
        StringBuilder sb = new StringBuilder(start);
        for (int i = 0; i < sb.length() - 1; i++) {
            if (sb.charAt(i) == 'R' && sb.charAt(i + 1) == 'X') {
                sb.setCharAt(i, 'X');
                sb.setCharAt(i + 1, 'R');
                i++; 
            } else if (sb.charAt(i) == 'X' && sb.charAt(i + 1) == 'L') {
                sb.setCharAt(i, 'L');
                sb.setCharAt(i + 1, '(');
                i++;
            }
        }

        
        return sb.toString().equals(end);
    }

    public static void main(String[] args) {
        String start = "RXXL";
        String end = "XRLX";
        boolean result = canTransform(start, end);
        System.out.println(result); 
    }
}


Subarray product less than A

class Solution {
    public int numSubarrayProductLessThanK(int[] nums, int k) {
        int i = 0,n = nums.length,product = 1,result = 0;
        for(int j = 0;j<n;j++)
        {
            product = product*nums[j];
            while(i<=j && product>=k)
            {
                product = product/nums[i];
                i++;
            }
            result += j-i+1;
        }
        return result;
    }
}

Merge 2 sorted list 


Node MergeLists(Node list1, Node list2) {
     
    
    Node dummy = new Node();
    dummy.next=null;
    dummy.data=0;
    
    Node temp= dummy;
    
    while(true)
        {
        
        if(list1==null)
        {    temp.next = list2;
            break;
        }
        else if(list2==null){
            temp.next = list1;
            break;
        }
        else if(list1.data < list2.data)
            {
              
              temp.next=list1;
              list1=list1.next;
            
        }
        
        else{
            temp.next=list2;
            list2=list2.next;
            
        }
        temp=temp.next;
    }
    return dummy.next;
    

}
